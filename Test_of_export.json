{"paragraphs":[{"text":"%sh\nhadoop fs -ls","user":"anonymous","dateUpdated":"2018-02-12T18:41:56-0500","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Found 9 items\ndrwxr-xr-x   - hadoop supergroup          0 2018-02-12 18:37 .sparkStaging\n-rw-r--r--   2 hadoop supergroup       1400 2018-01-26 12:20 0.circles\n-rw-r--r--   2 hadoop supergroup      37228 2018-01-26 11:26 0.edges\n-rw-r--r--   2 hadoop supergroup        448 2018-01-26 12:19 0.egofeat\n-rw-r--r--   2 hadoop supergroup     156736 2018-01-26 12:20 0.feat\n-rw-r--r--   2 hadoop supergroup       9303 2018-01-26 12:20 0.featnames\n-rw-r--r--   2 hadoop supergroup        140 2018-01-26 11:12 data.txt\ndrwxr-xr-x   - hadoop supergroup          0 2018-02-02 16:51 output.counts\n-rw-r--r--   2 hadoop supergroup         32 2017-12-05 15:54 test.text\n"}]},"apps":[],"jobName":"paragraph_1518478903762_1733228935","id":"20180212-184143_703567091","dateCreated":"2018-02-12T18:41:43-0500","dateStarted":"2018-02-12T18:41:56-0500","dateFinished":"2018-02-12T18:41:57-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:430"},{"text":"%spark\nimport org.apache.spark.mllib.recommendation.ALS\nimport org.jblas.DoubleMatrix\nimport java.io._\n\n\n\n\nval circleRawData = sc.textFile(\"0.circles\")\nval rawFbData = sc.textFile(\"0.feat\")\nval edgeData = sc.textFile(\"0.edges\")\nval featRddPair =  rawFbData.map(x => (x.split(\" \")(0).toInt, x.split(\" \").map(_.toDouble).slice(2,225)))\n\nval IDNum = 29\nval testnum = 1\n// val file = \"/Users/YCheng/Desktop/Recommand/result.txt\"\n// file < \"NodeID RecommendID Similarity\"\nval writefile = new PrintWriter(new File(\"result.txt\" ))\nwritefile.write(\"NodeID RecommendID Similarity\\n\")\nwritefile.close()\n\n\n\ndef cosineSimilarity(vec1: DoubleMatrix, vec2: DoubleMatrix): Double = {\n\tvec1.dot(vec2) / (vec1.norm2() * vec2.norm2())\n}\n\n\ndef recommendSingle(nodeid: Int){\n\tval baseUserVector = new DoubleMatrix(featRddPair.lookup(nodeid).head)\n\tval sims = featRddPair.map{case(id, factor) =>\n\t\tval factorVector = new DoubleMatrix(factor)\n\t\tval sim = cosineSimilarity(factorVector, baseUserVector)\n\t\t(id, sim)\n\t  \n    }\n\t//val num = 10\n\t//val sortRecommend = sims.top(20)(Ordering.by[(Int, Double), Double]{case (id, similarity) => similarity})\n\n\t//println(\"\\n\")\n\t//println(sortRecommend.take(30).mkString(\"\\n\"))\n\t//Importing Circles\n\t\n\t//Importing Edges\n\tval edgePair = edgeData.map(x => (x.split(\" \")(0).toInt, x.split(\" \")(1).toInt))\n\tval sortedRecommend = sims.sortBy(_._2,false)\n\tval IDEdges = edgePair.lookup(nodeid).toArray\n\t//Find the edges including the target node\n\tval recommendofTarget = sortedRecommend.keys.take(20)\n\n\tval recommendFinal = (recommendofTarget.toSet -- IDEdges.toSet -- Array(nodeid).toSet).toArray\n\n\tval recommendPairs = sims.filter(x => recommendFinal.contains(x._1))\n\t//println(recommendPairs.mkString(\"\\n\"))\n\tval outputPairs = recommendPairs.map(x => (nodeid, x))\n\tval outputResult = outputPairs.map{case(id1,(id2, similarity)) => (id1, id2, similarity)}\n\t\n\tval write = new PrintWriter(new FileOutputStream(new File(\"result.txt\"),true))\n\twrite.write(outputResult.take(10).to.mkString(\"\\n\"))\n\twrite.close()\n\tprintln(outputPairs.take(10).mkString(\"\\n\"))\n\t\n\t\n\t\n\t//output\n\t\n}\n\n//recommendSingle(29)\n\nfor (i <- 1 to 347){\n\n\trecommendSingle(i)\n\tval write = new PrintWriter(new FileOutputStream(new File(\"result.txt\"),true))\n\twrite.write(\"\\n\")\n\twrite.close()\n}\n\n//println(finalOutput.mkString(\"\\n\"))\n\n\n//recommendPairs.coalesce(1,true).saveAsTextFile(\"/Users/YCheng/Desktop/test\")\n\n//System.exit(0)\n\n","user":"anonymous","dateUpdated":"2018-02-12T19:42:15-0500","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"import org.apache.spark.mllib.recommendation.ALS\nimport org.jblas.DoubleMatrix\nimport java.io._\ncircleRawData: org.apache.spark.rdd.RDD[String] = 0.circles MapPartitionsRDD[6656] at textFile at <console>:81\nrawFbData: org.apache.spark.rdd.RDD[String] = 0.feat MapPartitionsRDD[6658] at textFile at <console>:81\nedgeData: org.apache.spark.rdd.RDD[String] = 0.edges MapPartitionsRDD[6660] at textFile at <console>:81\nfeatRddPair: org.apache.spark.rdd.RDD[(Int, Array[Double])] = MapPartitionsRDD[6661] at map at <console>:83\nIDNum: Int = 29\ntestnum: Int = 1\nwritefile: java.io.PrintWriter = java.io.PrintWriter@29de5efe\ncosineSimilarity: (vec1: org.jblas.DoubleMatrix, vec2: org.jblas.DoubleMatrix)Double\n<console>:105: error: missing arguments for method print in object Predef;\nfollow this method with `_' if you want to treat it as a partially applied function\n       \tprint  _sims\n        ^\n"}]},"apps":[],"jobName":"paragraph_1518032816488_-2145591234","id":"20180207-144656_858858990","dateCreated":"2018-02-07T14:46:56-0500","dateStarted":"2018-02-12T19:38:37-0500","dateFinished":"2018-02-12T19:38:40-0500","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:431"},{"text":"%sh\ncat result.txt","user":"anonymous","dateUpdated":"2018-02-12T18:43:50-0500","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518473549900_-1374596881","id":"20180212-171229_1168121641","dateCreated":"2018-02-12T17:12:29-0500","status":"ABORT","progressUpdateIntervalMs":500,"$$hashKey":"object:432"},{"text":"%python\nwith open(\"result.txt\") as file:\n    lines = file.readlines()\n    print(lines)\nresult = []\nfor i in range(1,len(lines)):\n    if i%10 == 1:\n        result.append(lines[i])\nfp = open(\"recommend.txt\",'w+')\nfor line in result:\n    fp.write(line)\nfp.close()","user":"anonymous","dateUpdated":"2018-02-14T23:23:25-0500","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518481169771_-1826492630","id":"20180212-191929_2097037423","dateCreated":"2018-02-12T19:19:29-0500","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:433"}],"name":"Test_of_export","id":"2D4WXKWDV","noteParams":{},"noteForms":{},"angularObjects":{"2D3GPNEXY:shared_process":[],"2CZ92FC7R:shared_process":[],"2D3NC4FKU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}